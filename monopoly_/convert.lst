     1                                  section .data
     2                                  
     3                                  ; powers of two up to 2^31
     4 00000000 010000000200000004-     two_powers  dd 1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,1073741824,2147483648
     4 00000009 000000080000001000-
     4 00000012 000020000000400000-
     4 0000001B 008000000000010000-
     4 00000024 000200000004000000-
     4 0000002D 080000001000000020-
     4 00000036 000000400000008000-
     4 0000003F 000000010000000200-
     4 00000048 000004000000080000-
     4 00000051 001000000020000000-
     4 0000005A 400000008000000000-
     4 00000063 010000000200000004-
     4 0000006C 000000080000001000-
     4 00000075 000020000000400000-
     4 0000007E 0080               
     5                                  
     6                                  section .text
     7                                  global bin_str
     8                                  
     9                                  ;------------------------------------------------------------------------------
    10                                  ; PROCEDURE:    bin_str
    11                                  ; IN:           eax: dword binary number, ebx: address of 32 bytes
    12                                  ; OUT:          memory at ebx: 32 bit equivalent number
    13                                  ; MODIFIES:     none
    14                                  ; CALLS:        none
    15                                  ; DETAILS:      checks each bit, then writes corresponding ascii 0 or 1 
    16                                  bin_str:
    17 00000000 60                              pushad      ; save regs
    18                                          
    19 00000001 B91F000000                      mov ecx,31  ; set bit counter to least significant bit
    20 00000006 D1E8                    shift:  shr eax,1   ; shift rightmost bit into carry flag
    21 00000008 7206                            jc .one     ; if bit is 1, jump
    22                                  
    23 0000000A C6040B30                .zer:   mov byte [ebx+ecx],48   ; write ASCII 0 to next byte
    24 0000000E EB06                            jmp .cloop              ; jump to loop check
    25 00000010 C6040B31                .one    mov byte [ebx+ecx],49   ;write ASCII 1
    26 00000014 EB00                            jmp .cloop              ; jump to loop check
    27                                  
    28 00000016 49                      .cloop: dec ecx                 ; dec bit counter
    29 00000017 83F900                          cmp ecx,0               ; compare bit counter with 0
    30 0000001A 7DEA                            jge shift               ; if (signed) greater, equal 0, loop
    31                                  
    32 0000001C 61                              popad       ; restore regs
    33 0000001D C3                              ret
